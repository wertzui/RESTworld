{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Repos\\\\wertzui\\\\RESTworld\\\\src\\\\Example\\\\ExampleBlog\\\\ExampleBlog.Client.Angular\\\\ClientApp\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HttpBackend, HttpClient } from \"@angular/common/http\";\nimport { RESTworldOptions } from \"../models/restworld-options\";\nimport { RESTworldClientCollection } from \"./restworld-client-collection\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./restworld-client-collection\";\nexport class SettingsService {\n  constructor(backend, _clients) {\n    this._clients = _clients;\n    this._client = new HttpClient(backend);\n  }\n\n  get settings() {\n    return this._settings;\n  }\n\n  initialize() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.ensureSettingsAreLoaded();\n      yield _this.populateRESTworldClientCollectionFromSettings();\n    })();\n  }\n\n  ensureSettingsAreLoaded() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2._settings = yield _this2._client.get('/settings').toPromise();\n    })();\n  }\n\n  populateRESTworldClientCollectionFromSettings() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (!_this3._settings?.apiUrls) return;\n      yield Promise.all(_this3._settings.apiUrls.map(api => _this3._clients.addOrGetExistingClient(api.name, new RESTworldOptions(api.url, api.version))));\n    })();\n  }\n\n}\n\nSettingsService.ɵfac = function SettingsService_Factory(t) {\n  return new (t || SettingsService)(i0.ɵɵinject(i1.HttpBackend), i0.ɵɵinject(i2.RESTworldClientCollection));\n};\n\nSettingsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SettingsService,\n  factory: SettingsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Repos/wertzui/RESTworld/src/Example/ExampleBlog/ExampleBlog.Client.Angular/ClientApp/src/app/ngx-restworld-client/services/settings.service.ts"],"names":["HttpBackend","HttpClient","RESTworldOptions","RESTworldClientCollection","i0","i1","i2","SettingsService","constructor","backend","_clients","_client","settings","_settings","initialize","ensureSettingsAreLoaded","populateRESTworldClientCollectionFromSettings","get","toPromise","apiUrls","Promise","all","map","api","addOrGetExistingClient","name","url","version","ɵfac","SettingsService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,UAAtB,QAAwC,sBAAxC;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AACA,SAASC,yBAAT,QAA0C,+BAA1C;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,+BAApB;AACA,OAAO,MAAMC,eAAN,CAAsB;AACzBC,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC3B,SAAKA,QAAL,GAAgBA,QAAhB;AACA,SAAKC,OAAL,GAAe,IAAIV,UAAJ,CAAeQ,OAAf,CAAf;AACH;;AACW,MAARG,QAAQ,GAAG;AACX,WAAO,KAAKC,SAAZ;AACH;;AACKC,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,YAAM,KAAI,CAACC,uBAAL,EAAN;AACA,YAAM,KAAI,CAACC,6CAAL,EAAN;AAFe;AAGlB;;AACKD,EAAAA,uBAAuB,GAAG;AAAA;;AAAA;AAC5B,MAAA,MAAI,CAACF,SAAL,SAAuB,MAAI,CAACF,OAAL,CAClBM,GADkB,CACd,WADc,EAElBC,SAFkB,EAAvB;AAD4B;AAI/B;;AACKF,EAAAA,6CAA6C,GAAG;AAAA;;AAAA;AAClD,UAAI,CAAC,MAAI,CAACH,SAAL,EAAgBM,OAArB,EACI;AACJ,YAAMC,OAAO,CAACC,GAAR,CAAY,MAAI,CAACR,SAAL,CAAeM,OAAf,CACbG,GADa,CACTC,GAAG,IAAI,MAAI,CAACb,QAAL,CAAcc,sBAAd,CAAqCD,GAAG,CAACE,IAAzC,EAA+C,IAAIvB,gBAAJ,CAAqBqB,GAAG,CAACG,GAAzB,EAA8BH,GAAG,CAACI,OAAlC,CAA/C,CADE,CAAZ,CAAN;AAHkD;AAKrD;;AAtBwB;;AAwB7BpB,eAAe,CAACqB,IAAhB,GAAuB,SAASC,uBAAT,CAAiCC,CAAjC,EAAoC;AAAE,SAAO,KAAKA,CAAC,IAAIvB,eAAV,EAA2BH,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAACL,WAAf,CAA3B,EAAwDI,EAAE,CAAC2B,QAAH,CAAYzB,EAAE,CAACH,yBAAf,CAAxD,CAAP;AAA4G,CAAzK;;AACAI,eAAe,CAACyB,KAAhB,GAAwB,aAAc5B,EAAE,CAAC6B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE3B,eAAT;AAA0B4B,EAAAA,OAAO,EAAE5B,eAAe,CAACqB,IAAnD;AAAyDQ,EAAAA,UAAU,EAAE;AAArE,CAAtB,CAAtC","sourcesContent":["import { HttpBackend, HttpClient } from \"@angular/common/http\";\r\nimport { RESTworldOptions } from \"../models/restworld-options\";\r\nimport { RESTworldClientCollection } from \"./restworld-client-collection\";\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./restworld-client-collection\";\r\nexport class SettingsService {\r\n    constructor(backend, _clients) {\r\n        this._clients = _clients;\r\n        this._client = new HttpClient(backend);\r\n    }\r\n    get settings() {\r\n        return this._settings;\r\n    }\r\n    async initialize() {\r\n        await this.ensureSettingsAreLoaded();\r\n        await this.populateRESTworldClientCollectionFromSettings();\r\n    }\r\n    async ensureSettingsAreLoaded() {\r\n        this._settings = await this._client\r\n            .get('/settings')\r\n            .toPromise();\r\n    }\r\n    async populateRESTworldClientCollectionFromSettings() {\r\n        if (!this._settings?.apiUrls)\r\n            return;\r\n        await Promise.all(this._settings.apiUrls\r\n            .map(api => this._clients.addOrGetExistingClient(api.name, new RESTworldOptions(api.url, api.version))));\r\n    }\r\n}\r\nSettingsService.ɵfac = function SettingsService_Factory(t) { return new (t || SettingsService)(i0.ɵɵinject(i1.HttpBackend), i0.ɵɵinject(i2.RESTworldClientCollection)); };\r\nSettingsService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: SettingsService, factory: SettingsService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}